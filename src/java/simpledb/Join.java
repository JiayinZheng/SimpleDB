package simpledb;

import com.sun.deploy.security.SelectableSecurityManager;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    private JoinPredicate joinP;
    private OpIterator joinOp1;
    private OpIterator joinOp2;
    private Tuple t1 = null;
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        joinP = p;
        joinOp1 = child1;
        joinOp2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return joinP;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return joinOp1.getTupleDesc().getFieldName(joinP.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return joinOp2.getTupleDesc().getFieldName(joinP.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(joinOp1.getTupleDesc(),joinOp2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        joinOp1.open();
        joinOp2.open();
        super.open();

    }

    public void close() {
        // some code goes here
        super.close();
        joinOp1.close();
        joinOp2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        Tuple result = null;
        if(t1==null&&joinOp1.hasNext()){
            t1 = joinOp1.next();
        }
        while(joinOp1.hasNext()||t1!=null){
            if(t1==null){
                t1 = joinOp1.next();
            }
            while(joinOp2.hasNext()){
                Tuple t2 = joinOp2.next();
                if(t1!=null&&t2!=null){
                    if(joinP.filter(t1,t2)){
                        TupleDesc td3 = TupleDesc.merge(t1.getTupleDesc(),t2.getTupleDesc());
                        //这里有问题，需要合并
                        Tuple t3 = new Tuple(td3);
                        for(int i=0;i<t1.getTupleDesc().numFields();i++){
                            t3.setField(i,t1.getField(i));
                        }
                        for(int i=0;i<t2.getTupleDesc().numFields();i++){
                            t3.setField(i+t1.getTupleDesc().numFields(),t2.getField(i));
                        }
                        return  t3;
                    }
                }
            }
            if(!joinOp2.hasNext()){
                joinOp2.rewind();
                t1 = null;
            }
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] {joinOp1,joinOp2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
    }

}
